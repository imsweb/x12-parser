plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id 'maven-publish'
    id 'signing'
    id "io.codearte.nexus-staging" version "0.30.0"  // logs into Sonotype OSS and does a "Close" and "Release"
    id 'com.adarshr.test-logger' version '4.0.0'
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'org.sonatype.gradle.plugins.scan' version '2.8.3'
    id "org.sonarqube" version "5.1.0.4882"
}

group = 'com.imsweb'
version = '1.15'
description = 'Java client library for parsing x12 files'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'                         // UTF-8 for all compilation tasks
    options.compilerArgs << "-Xlint:all" << "-Werror"  // fail the build if there are compiler warnings
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    api 'com.thoughtworks.xstream:xstream:1.4.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
    testImplementation 'commons-io:commons-io:2.16.1'
    testImplementation 'org.jsoup:jsoup:1.18.1'
    testImplementation 'com.jayway.jsonpath:json-path:2.9.0'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': archiveVersion,
                'Implementation-Vendor': group,
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.x12'
        )
    }
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion '8.29'
    configFile = file('config/checkstyle/checkstyle.xml')
}

spotbugs {
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

// Nexus vulnerability scan (https://github.com/sonatype-nexus-community/scan-gradle-plugin)
ossIndexAudit {
    outputFormat = 'DEPENDENCY_GRAPH'
    printBanner = false
}
check.dependsOn 'ossIndexAudit'

sonar {
    properties {
        property "sonar.projectKey", "imsweb_x12-parser"
        property "sonar.organization", "imsweb"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.gradle.skipCompile", "true"
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    // ignore alpha, beta, etc. versions
    rejectVersionIf { selection ->
        isNonStable(selection.candidate.version)
    }
}

// don't try to release a snapshot to a non-snapshot repository, that won't work anyway
if (version.endsWith('-SNAPSHOT')) {
    gradle.startParameter.excludedTaskNames += 'signMavenJavaPublication'
    gradle.startParameter.excludedTaskNames += 'closeAndReleaseRepository'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'x12-parser'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'X12 Parser'
                description = 'A Java library for parsing X12 files, including ANSI 837'
                url = 'https://github.com/imsweb/x12-parser'
                inceptionYear = '2015'

                licenses {
                    license {
                        name = 'A modified BSD License (BSD)'
                        url = 'https://github.com/imsweb/x12-parser/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'AngelaszekD'
                        name = 'David Angelaszek'
                        email = 'AngelaszekD@imsweb.com'
                    }
                    developer {
                        id = 'ctmay4'
                        name = 'Chuck May'
                        email = 'mayc@imsweb.com'
                    }
                }

                scm {
                    url = 'https://github.com/imsweb/x12-parser'
                    connection = 'scm:https://github.com/imsweb/x12-parser.git'
                    developerConnection = 'scm:git@github.com:imsweb/x12-parser.git'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty('nexusUsername') ?: ''
                password = project.findProperty('nexusPassword') ?: ''
            }
        }
    }
}

signing {
    def signingKey = project.findProperty('signingKey') ?: ''
    def signingPassword = project.findProperty('signingPassword') ?: ''

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// configure nexus staging plugin
nexusStaging {
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 5000
}

wrapper {
    gradleVersion = '8.10'
    distributionType = Wrapper.DistributionType.ALL
}
